// Test generated by RoostGPT for test zb-js-test using AI Type Open AI and AI Model gpt-4

import React from 'react';
import { shallow } from 'enzyme';
import Result from './Result';

describe('Result Component', () => {
  let wrapper;
  let instance;

  const mockState = {
    results: [
      { candidate_id: 'docker', vote_count: 5 },
      { candidate_id: 'minikube', vote_count: 3 }
    ],
    candidates: [
      { Name: 'docker', ImageUrl: 'docker.png' },
      { Name: 'minikube', ImageUrl: 'minikube.png' }
    ],
    total_votes: 8
  };

  beforeEach(() => {
    wrapper = shallow(<Result />);
    instance = wrapper.instance();
    instance.setState(mockState);
  });

  test('should render without throwing an error', () => {
    expect(wrapper.exists()).toBe(true);
  });

  test('should render correct number of custom cards', () => {
    expect(wrapper.find('.card').length).toBe(mockState.results.length);
  });

  test('should render no votes message when no results', () => {
    instance.setState({ results: [] });
    expect(wrapper.find('.heading').text()).toBe('No votes has been given');
  });

  test('should render candidate image correctly', () => {
    const firstCard = wrapper.find('.card').at(0);
    expect(firstCard.find('img').prop('src')).toBe('docker.png');
  });

  test('should render progress bar correctly', () => {
    const firstCard = wrapper.find('.card').at(0);
    const progress = Math.round(
      (mockState.results[0].vote_count / mockState.total_votes) * 100
    );
    expect(firstCard.find('.progressbar_front').prop('style')).toHaveProperty('width', `${progress}%`);
  });
});

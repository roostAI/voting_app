// Test generated by RoostGPT for test zb-js-test using AI Type Open AI and AI Model gpt-4

const registerValidSW = require('./serviceWorker');

global.navigator = {
  serviceWorker: {
    register: jest.fn(),
    controller: true,
  },
};

describe('registerValidSW', () => {
  beforeEach(() => {
    global.console = {
      log: jest.fn(),
      error: jest.fn(),
    };
  });

  it('should register service worker and call onUpdate callback when new content is available', () => {
    let config = {
      onUpdate: jest.fn(),
    };
    let swUrl = 'http://localhost:3000/service-worker.js';
    let mockRegistration = {
      installing: {
        state: 'installed',
        onstatechange: null,
      },
      onupdatefound: null,
    };

    navigator.serviceWorker.register.mockReturnValueOnce(Promise.resolve(mockRegistration));

    registerValidSW(swUrl, config);

    return Promise.resolve().then(() => {
      expect(navigator.serviceWorker.register).toBeCalledWith(swUrl);
      expect(mockRegistration.onupdatefound).not.toBeNull();
      mockRegistration.onupdatefound();
      expect(mockRegistration.installing.onstatechange).not.toBeNull();
      mockRegistration.installing.onstatechange();
      expect(config.onUpdate).toBeCalledWith(mockRegistration);
      expect(console.log).toBeCalledWith('New content is available and will be used when all tabs for this page are closed. See https:bit.ly/CRA-PWA.');
    });
  });

  it('should register service worker and call onSuccess callback when content is cached for offline use', () => {
    let config = {
      onSuccess: jest.fn(),
    };
    let swUrl = 'http://localhost:3000/service-worker.js';
    let mockRegistration = {
      installing: {
        state: 'installed',
        onstatechange: null,
      },
      onupdatefound: null,
    };

    navigator.serviceWorker.register.mockReturnValueOnce(Promise.resolve(mockRegistration));
    navigator.serviceWorker.controller = false;

    registerValidSW(swUrl, config);

    return Promise.resolve().then(() => {
      expect(navigator.serviceWorker.register).toBeCalledWith(swUrl);
      expect(mockRegistration.onupdatefound).not.toBeNull();
      mockRegistration.onupdatefound();
      expect(mockRegistration.installing.onstatechange).not.toBeNull();
      mockRegistration.installing.onstatechange();
      expect(config.onSuccess).toBeCalledWith(mockRegistration);
      expect(console.log).toBeCalledWith('Content is cached for offline use.');
    });
  });

  it('should log error when service worker registration fails', () => {
    let config = {};
    let swUrl = 'http://localhost:3000/service-worker.js';
    let error = new Error('Service worker registration failed');

    navigator.serviceWorker.register.mockReturnValueOnce(Promise.reject(error));

    registerValidSW(swUrl, config);

    return Promise.resolve().then(() => {
      expect(navigator.serviceWorker.register).toBeCalledWith(swUrl);
      expect(console.error).toBeCalledWith('Error during service worker registration:', error);
    });
  });
});

// Test generated by RoostGPT for test zb-js-test using AI Type Open AI and AI Model gpt-4

import React from 'react';
import { shallow } from 'enzyme';
import Result from './Result';

jest.mock('node-fetch', () => require('fetch-mock-jest').sandbox());

const fetchMock = require('node-fetch');

describe('Result component', () => {
  let component;
  const ballot_endpoint = '//localhost:3000/ballot';
  const ec_server_endpoint = '//localhost:3000/ec-server';

  beforeEach(() => {
    component = shallow(<Result />);
    fetchMock.restore();
  });

  it('should fetch results on componentDidMount', async () => {
    fetchMock.get(`http:${ballot_endpoint}`, {
      results: ['result1', 'result2'],
      total_votes: 100,
    });

    await component.instance().componentDidMount();
    expect(component.state('results')).toEqual(['result1', 'result2']);
    expect(component.state('total_votes')).toBe(100);
  });

  it('should handle error on fetching results', async () => {
    fetchMock.get(`http:${ballot_endpoint}`, 500);

    await component.instance().componentDidMount();
    expect(component.state('results')).toEqual([]);
    expect(component.state('total_votes')).toBe(0);
  });

  it('should fetch candidates on componentDidMount', async () => {
    fetchMock.get(`http:${ec_server_endpoint}`, {
      Candidates: ['candidate1', 'candidate2'],
    });

    await component.instance().componentDidMount();
    expect(component.state('candidates')).toEqual(['candidate1', 'candidate2']);
  });

  it('should handle error on fetching candidates', async () => {
    fetchMock.get(`http:${ec_server_endpoint}`, 500);

    await component.instance().componentDidMount();
    expect(component.state('candidates')).toEqual([]);
  });
});
